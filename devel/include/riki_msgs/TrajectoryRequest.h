// Generated by gencpp from file riki_msgs/TrajectoryRequest.msg
// DO NOT EDIT!


#ifndef RIKI_MSGS_MESSAGE_TRAJECTORYREQUEST_H
#define RIKI_MSGS_MESSAGE_TRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace riki_msgs
{
template <class ContainerAllocator>
struct TrajectoryRequest_
{
  typedef TrajectoryRequest_<ContainerAllocator> Type;

  TrajectoryRequest_()
    : id2(0)
    , id3(0)
    , id4(0)
    , id5(0)
    , id6(0)
    , time(0)  {
    }
  TrajectoryRequest_(const ContainerAllocator& _alloc)
    : id2(0)
    , id3(0)
    , id4(0)
    , id5(0)
    , id6(0)
    , time(0)  {
  (void)_alloc;
    }



   typedef int16_t _id2_type;
  _id2_type id2;

   typedef int16_t _id3_type;
  _id3_type id3;

   typedef int16_t _id4_type;
  _id4_type id4;

   typedef int16_t _id5_type;
  _id5_type id5;

   typedef int16_t _id6_type;
  _id6_type id6;

   typedef int16_t _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryRequest_

typedef ::riki_msgs::TrajectoryRequest_<std::allocator<void> > TrajectoryRequest;

typedef boost::shared_ptr< ::riki_msgs::TrajectoryRequest > TrajectoryRequestPtr;
typedef boost::shared_ptr< ::riki_msgs::TrajectoryRequest const> TrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::riki_msgs::TrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::riki_msgs::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::riki_msgs::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id2 == rhs.id2 &&
    lhs.id3 == rhs.id3 &&
    lhs.id4 == rhs.id4 &&
    lhs.id5 == rhs.id5 &&
    lhs.id6 == rhs.id6 &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::riki_msgs::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::riki_msgs::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace riki_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f982c44c4992b0945e9540dc9fc648e5";
  }

  static const char* value(const ::riki_msgs::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf982c44c4992b094ULL;
  static const uint64_t static_value2 = 0x5e9540dc9fc648e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "riki_msgs/TrajectoryRequest";
  }

  static const char* value(const ::riki_msgs::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id2\n"
"int16 id3\n"
"int16 id4\n"
"int16 id5\n"
"int16 id6\n"
"int16 time\n"
"\n"
"\n"
;
  }

  static const char* value(const ::riki_msgs::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id2);
      stream.next(m.id3);
      stream.next(m.id4);
      stream.next(m.id5);
      stream.next(m.id6);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::riki_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::riki_msgs::TrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "id2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id2);
    s << indent << "id3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id3);
    s << indent << "id4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id4);
    s << indent << "id5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id5);
    s << indent << "id6: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id6);
    s << indent << "time: ";
    Printer<int16_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIKI_MSGS_MESSAGE_TRAJECTORYREQUEST_H
